<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="stock">
    <resultMap id="stockMap" type="stock">
        <id property="stkId" column="stk_id"/>
        <result property="stkStock" column="STK_STOCK"/>
        <result property="branchId" column="BRANCH_ID"/>
        <result property="prdId" column="PRD_ID"/>
    </resultMap>

<<<<<<< HEAD

    <!--    <select id="selectStockByBranch" parameterType="hashMap" resultType="hashMap">
            WITH RecentStockDate AS (
            SELECT MAX(stk_date) AS recent_date
            FROM stock
            WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
            ),
            UniquePrices AS (
            SELECT DISTINCT p.prd_id, p.price_in_stk
            FROM product p
            JOIN stock s ON p.prd_id = s.prd_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            ),
            BranchStock AS (
            SELECT prd_id, branch_id, stk_stock,
            ROW_NUMBER() OVER (PARTITION BY prd_id, branch_id ORDER BY stk_date DESC) AS rn
            FROM stock
            WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
            ),
            SelectedProducts AS (
            <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
                SELECT prd_id FROM product WHERE prd_id IN
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </if>
            ),
            BranchStockSum AS (
            SELECT branch_id,
            SUM(stk_stock) AS total_branch_stock
            FROM BranchStock
            JOIN SelectedProducts ON BranchStock.prd_id = SelectedProducts.prd_id
            WHERE rn = 1
            GROUP BY branch_id
            )
            SELECT p.*,
            s.*,
            SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_STOCK_BY_PRD, &#45;&#45; 품목별 총 재고량
            (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST, &#45;&#45; 단가 총액
            p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE, &#45;&#45; 품목별 총 판매가
            (SELECT SUM(p.prd_price * s.stk_stock)
            FROM stock s
            JOIN product p ON s.prd_id = p.prd_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            WHERE
            <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
                1=1
            </if>
            <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
                s.branch_id IN
                <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                    #{branchId}
                </foreach>
            </if>
            <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
                AND 1=1
            </if>
            <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
                AND s.prd_id IN
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </if>
            ) AS TOTAL_PRICE_ALLPRD, &#45;&#45; 모든 품목에 대한 전체 판매가
            SUM(s.stk_stock) OVER () AS TOTAL_STOCK_BY_ALLPRD,
            COALESCE(BS1.total_branch_stock, 0) AS Branch1_Stock_Sum,
            COALESCE(BS2.total_branch_stock, 0) AS Branch2_Stock_Sum,
            COALESCE(BS3.total_branch_stock, 0) AS Branch3_Stock_Sum,
            COALESCE(BS4.total_branch_stock, 0) AS Branch4_Stock_Sum,
            COALESCE(BS5.total_branch_stock, 0) AS Branch5_Stock_Sum,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 1 AND rn = 1) AS Branch1_Stock,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 2 AND rn = 1) AS Branch2_Stock,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 3 AND rn = 1) AS Branch3_Stock,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 4 AND rn = 1) AS Branch4_Stock,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 5 AND rn = 1) AS Branch5_Stock,
            b.branch_name,
            #{stkDate} AS selected_stk_date
            FROM stock s
            JOIN product p ON s.prd_id = p.prd_id
            JOIN branch b ON s.branch_id = b.branch_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            /* LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 1 AND rn = 1 GROUP
            BY
            prd_id) B1 ON p.prd_id = B1.prd_id
            LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 2 AND rn = 1 GROUP BY
            prd_id) B2 ON p.prd_id = B2.prd_id
            LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 3 AND rn = 1 GROUP BY
            prd_id) B3 ON p.prd_id = B3.prd_id
            LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 4 AND rn = 1 GROUP BY
            prd_id) B4 ON p.prd_id = B4.prd_id
            LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 5 AND rn = 1 GROUP BY
            prd_id) B5 ON p.prd_id = B5.prd_id*/
            LEFT JOIN BranchStockSum BS1 ON b.branch_id = BS1.branch_id AND BS1.branch_id = 1
            LEFT JOIN BranchStockSum BS2 ON b.branch_id = BS2.branch_id AND BS2.branch_id = 2
            LEFT JOIN BranchStockSum BS3 ON b.branch_id = BS3.branch_id AND BS3.branch_id = 3
            LEFT JOIN BranchStockSum BS4 ON b.branch_id = BS4.branch_id AND BS4.branch_id = 4
            LEFT JOIN BranchStockSum BS5 ON b.branch_id = BS5.branch_id AND BS5.branch_id = 5
            WHERE
            <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
                1=1 &lt;!&ndash; 첫 번째 조건: 모든 지점을 포함 &ndash;&gt;
            </if>
            <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
                s.branch_id IN &lt;!&ndash; 추가 조건: 특정 지점을 포함 &ndash;&gt;
                <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                    #{branchId}
                </foreach>
            </if>
            <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
                AND 1=1 &lt;!&ndash; 추가 조건: 모든 품목을 포함 &ndash;&gt;
            </if>
            <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
                AND s.prd_id IN &lt;!&ndash; 추가 조건: 특정 품목을 포함 &ndash;&gt;
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </if>
        </select>-->

    <!--    <select id="selectStockByBranch" parameterType="hashMap" resultType="hashMap">
            WITH RecentStockDate AS (
            SELECT MAX(stk_date) AS recent_date
            FROM stock
            WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
            ),
            UniquePrices AS (
            SELECT DISTINCT p.prd_id, p.price_in_stk
            FROM product p
            JOIN stock s ON p.prd_id = s.prd_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            ),
            BranchStock AS (
            SELECT prd_id, branch_id, stk_stock,
            ROW_NUMBER() OVER (PARTITION BY prd_id, branch_id ORDER BY stk_date DESC) AS rn
            FROM stock
            WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
            ),
            SelectedProducts AS (
            <if test="prdIdList != null">
                <choose>
                    <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                        SELECT prd_id FROM product
                    </when>
                    <otherwise>
                        SELECT prd_id FROM product WHERE prd_id IN
                        <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                            #{prdId}
                        </foreach>
                    </otherwise>
                </choose>
            </if>
            ),
            SelectedBranches AS (
            <if test="branchIdList != null">
                <choose>
                    <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                        SELECT branch_id FROM branch
                    </when>
                    <otherwise>
                        SELECT branch_id FROM branch WHERE branch_id IN
                        <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                            #{branchId}
                        </foreach>
                    </otherwise>
                </choose>
            </if>
            ),
            SelectedBranchStock AS (
            SELECT prd_id, branch_id, stk_stock
            FROM BranchStock
            WHERE rn = 1
            AND prd_id IN (SELECT prd_id FROM SelectedProducts)
            AND branch_id IN (SELECT branch_id FROM SelectedBranches)
            ),
            BranchStockSum AS (
            SELECT branch_id,
            SUM(stk_stock) AS total_branch_stock
            FROM SelectedBranchStock
            GROUP BY branch_id
            )
            SELECT p.*,
            s.*,
            SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_STOCK_BY_PRD, &#45;&#45; 품목별 총 재고량
            (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST, &#45;&#45; 단가 총액
            p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE, &#45;&#45; 품목별 총 판매가
            (SELECT SUM(p.prd_price * s.stk_stock) FROM SelectedBranchStock) AS TOTAL_PRICE_ALLPRD, &#45;&#45; 모든 품목에 대한 전체 판매가
            SUM(s.stk_stock) OVER () AS TOTAL_STOCK_BY_ALLPRD,
            COALESCE(BS1.total_branch_stock, 0) AS Branch1_Stock_Sum,
            COALESCE(BS2.total_branch_stock, 0) AS Branch2_Stock_Sum,
            COALESCE(BS3.total_branch_stock, 0) AS Branch3_Stock_Sum,
            COALESCE(BS4.total_branch_stock, 0) AS Branch4_Stock_Sum,
            COALESCE(BS5.total_branch_stock, 0) AS Branch5_Stock_Sum,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 1 AND rn = 1) AS Branch1_Stock,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 2 AND rn = 1) AS Branch2_Stock,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 3 AND rn = 1) AS Branch3_Stock,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 4 AND rn = 1) AS Branch4_Stock,
            (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 5 AND rn = 1) AS Branch5_Stock,
            b.branch_name,
            #{stkDate} AS selected_stk_date
            FROM stock s
            JOIN product p ON s.prd_id = p.prd_id
            JOIN branch b ON s.branch_id = b.branch_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            LEFT JOIN BranchStockSum BS1 ON b.branch_id = BS1.branch_id AND BS1.branch_id = 1
            LEFT JOIN BranchStockSum BS2 ON b.branch_id = BS2.branch_id AND BS2.branch_id = 2
            LEFT JOIN BranchStockSum BS3 ON b.branch_id = BS3.branch_id AND BS3.branch_id = 3
            LEFT JOIN BranchStockSum BS4 ON b.branch_id = BS4.branch_id AND BS4.branch_id = 4
            LEFT JOIN BranchStockSum BS5 ON b.branch_id = BS5.branch_id AND BS5.branch_id = 5
            WHERE
            <if test="branchIdList != null">
                <choose>
                    <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                        1=1
                    </when>
                    <otherwise>
                        s.branch_id IN
                        <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                            #{branchId}
                        </foreach>
                    </otherwise>
                </choose>
            </if>
            <if test="prdIdList != null">
                <choose>
                    <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                        AND 1=1
                    </when>
                    <otherwise>
                        AND s.prd_id IN
                        <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                            #{prdId}
                        </foreach>
                    </otherwise>
                </choose>
            </if>
        </select>-->
    <select id="selectInventoryReport" parameterType="hashMap" resultType="hashMap">
        WITH DateRange AS (SELECT TO_DATE('2023-01-01', 'YYYY-MM-DD') AS start_date,
        TO_DATE('2023-02-01', 'YYYY-MM-DD') AS end_date
        FROM dual),
        SelectedProducts AS (
        SELECT prd_id FROM product WHERE prd_id IN 1
        <!--<choose>
            <when test="prdIdList != null and !prdIdList.isEmpty()">
                SELECT prd_id FROM product WHERE prd_id IN
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </when>
            <otherwise>
                SELECT prd_id FROM product
            </otherwise>
        </choose>-->


        ),
        SelectedBranches AS (
        SELECT branch_id FROM branch WHERE branch_id IN 1
        <!--        <choose>
                    <when test="branchIdList != null and !branchIdList.isEmpty()">
                        SELECT branch_id FROM branch WHERE branch_id IN
                        <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                            #{branchId}
                        </foreach>
                    </when>
                    <otherwise>
                        SELECT branch_id FROM branch
                    </otherwise>
                </choose>-->


        ),
        InventoryData AS (
        SELECT s.stk_id, s.stk_date, i.iv_type, s.stk_stock, s.prd_id,
        s.branch_id, i.recieve_brc_id, i.send_brc_id -- Ensure send_brc_id is being selected
        FROM STOCK s
        JOIN inventory i ON s.stk_id = i.iv_id
        JOIN SelectedProducts sp ON s.prd_id = sp.prd_id
        JOIN SelectedBranches sb ON s.branch_id = sb.branch_id
        WHERE s.stk_date BETWEEN (SELECT start_date FROM DateRange) AND (SELECT end_date FROM DateRange)
        ),
        InOutStock AS (
        SELECT id.prd_id, id.stk_date, id.branch_id, id.recieve_brc_id, id.send_brc_id,
        CASE WHEN id.iv_type = '입고' THEN id.stk_stock ELSE 0 END AS in_quantity,
        CASE WHEN id.iv_type = '출고' THEN id.stk_stock ELSE 0 END AS out_quantity
        FROM InventoryData id
        ),
        MonthlyTotals AS (
        SELECT ios.prd_id, ios.branch_id,
        TO_CHAR(ios.stk_date, 'YYYY-MM') AS total_month_name,
        SUM(ios.in_quantity) AS total_month_in,
        SUM(ios.out_quantity) AS total_month_out,
        SUM(ios.in_quantity - ios.out_quantity) AS total_month_quantity
        FROM InOutStock ios
        GROUP BY ios.prd_id, ios.branch_id, TO_CHAR(ios.stk_date, 'YYYY-MM')
        ),
        FinalTotals AS (
        SELECT prd_id,
        SUM(total_month_in) AS final_month_in,
        SUM(total_month_out) AS final_month_out,
        SUM(total_month_quantity) AS final_quantity
        FROM MonthlyTotals
        GROUP BY prd_id
        )
        SELECT p.prd_id, p.prd_title, ios.stk_date, ios.branch_id,
        rb.branch_name AS recieve_branch_name, <!-- Getting the receiving branch name -->
        sb.branch_name AS send_branch_name, <!-- Getting the sending branch name -->
        ios.in_quantity AS cumulative_in,
        ios.out_quantity AS cumulative_out,
        COALESCE(LAG(ios.in_quantity - ios.out_quantity, 1, 0) OVER (PARTITION BY ios.prd_id, ios.branch_id ORDER BY
        ios.stk_date), 0) + ios.in_quantity - ios.out_quantity AS stock_quantity,
        mt.total_month_name, mt.total_month_in, mt.total_month_out, mt.total_month_quantity,
        ft.final_month_in, ft.final_month_out, ft.final_quantity
        FROM InOutStock ios
        JOIN product p ON ios.prd_id = p.prd_id
        JOIN branch rb ON ios.recieve_brc_id = rb.branch_id <!-- Join to get receiving branch name -->
        JOIN branch sb ON ios.send_brc_id = sb.branch_id <!-- Join to get sending branch name -->
        JOIN MonthlyTotals mt ON ios.prd_id = mt.prd_id AND ios.branch_id = mt.branch_id
        AND TO_CHAR(ios.stk_date, 'YYYY-MM') = mt.total_month_name
        JOIN FinalTotals ft ON ios.prd_id = ft.prd_id
        ORDER BY p.prd_id, ios.branch_id, ios.stk_date

    </select>

    <!-- <select id="selectInventoryReport" parameterType="hashMap" resultType="hashMap">
         WITH DateRange AS (
         SELECT TO_DATE('2023-01-01', 'YYYY-MM-DD') AS start_date,
         TO_DATE('2024-01-01', 'YYYY-MM-DD') AS end_date
         FROM dual
         ),
         SelectedProducts AS (
         SELECT prd_id FROM product WHERE prd_id IN 1
         &lt;!&ndash;        <choose>
                     <when test="prdIdList != null and !prdIdList.isEmpty()">
                         SELECT prd_id FROM product WHERE prd_id IN
                         <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                             #{prdId}
                         </foreach>
                     </when>
                     <otherwise>
                         SELECT prd_id FROM product
                     </otherwise>
                 </choose>&ndash;&gt;
         ),
         SelectedBranches AS (
         SELECT branch_id FROM branch WHERE branch_id IN 1
         &lt;!&ndash;        <choose>
                     <when test="branchIdList != null and !branchIdList.isEmpty()">
                         SELECT branch_id FROM branch WHERE branch_id IN
                         <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                             #{branchId}
                         </foreach>
                     </when>
                     <otherwise>
                         SELECT branch_id FROM branch
                     </otherwise>
                 </choose>&ndash;&gt;
         ),
         InventoryData AS (
         SELECT s.stk_id, s.stk_date, i.iv_type, s.stk_stock, s.prd_id, s.branch_id
         FROM STOCK s
         JOIN inventory i ON s.stk_id = i.iv_id
         JOIN SelectedProducts sp ON s.prd_id = sp.prd_id
         JOIN SelectedBranches sb ON s.branch_id = sb.branch_id
         WHERE s.stk_date BETWEEN (SELECT start_date FROM DateRange) AND (SELECT end_date FROM DateRange)
         ),
         InOutStock AS (
         SELECT s.prd_id, s.stk_date, s.branch_id,
         CASE WHEN iv_type = '입고' THEN stk_stock ELSE 0 END AS in_quantity,
         CASE WHEN iv_type = '출고' THEN stk_stock ELSE 0 END AS out_quantity
         FROM STOCK s
         JOIN inventory i ON s.stk_id = i.iv_id
         JOIN SelectedProducts ON s.prd_id = SelectedProducts.prd_id
         JOIN SelectedBranches ON s.branch_id = SelectedBranches.branch_id
         WHERE s.stk_date BETWEEN (SELECT start_date FROM DateRange) AND (SELECT end_date FROM DateRange)
         ),
         CumulativeStock AS (
         SELECT ios.prd_id, ios.stk_date, ios.branch_id, &#45;&#45; ios. 별칭 추가
         SUM(ios.in_quantity) OVER (PARTITION BY ios.prd_id, ios.branch_id ORDER BY ios.stk_date) AS cumulative_in,
         SUM(ios.out_quantity) OVER (PARTITION BY ios.prd_id, ios.branch_id ORDER BY ios.stk_date) AS cumulative_out
         FROM InOutStock ios
         )
         SELECT p.prd_id, p.prd_title, cs.stk_date, cs.branch_id,
         cs.cumulative_in,
         cs.cumulative_out,
         COALESCE(LAG(cs.cumulative_in - cs.cumulative_out) OVER (PARTITION BY cs.prd_id, cs.branch_id ORDER BY
         cs.stk_date), 0) +
         cs.cumulative_in - cs.cumulative_out AS stock_quantity
         FROM CumulativeStock cs
         JOIN product p ON cs.prd_id = p.prd_id
         ORDER BY p.prd_id, cs.branch_id, cs.stk_date
     </select>-->

    <!--<select id="selectInventoryReport" parameterType="hashMap" resultType="hashMap">
        WITH DateRange AS (
        SELECT TO_DATE('2023-01-01', 'YYYY-MM-DD') AS start_date,
        TO_DATE('2023-12-31', 'YYYY-MM-DD') AS end_date
        FROM dual
        ),
        SelectedProducts AS (
        SELECT prd_id FROM product WHERE prd_id IN 1
        &lt;!&ndash;        <choose>
                    <when test="prdIdList != null and !prdIdList.isEmpty()">
                        SELECT prd_id FROM product WHERE prd_id IN
                        <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                            #{prdId}
                        </foreach>
                    </when>
                    <otherwise>
                        SELECT prd_id FROM product
                    </otherwise>
                </choose>&ndash;&gt;
        ),
        SelectedBranches AS (

        SELECT branch_id FROM branch WHERE branch_id IN 1
        &lt;!&ndash;        <choose>
                    <when test="branchIdList != null and !branchIdList.isEmpty()">
                        SELECT branch_id FROM branch WHERE branch_id IN
                        <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                            #{branchId}
                        </foreach>
                    </when>
                    <otherwise>
                        SELECT branch_id FROM branch
                    </otherwise>
                </choose>&ndash;&gt;
        ),
        InventoryData AS (
        SELECT s.stk_id, s.stk_date, i.iv_type, s.stk_stock, s.prd_id, s.branch_id
        FROM STOCK s
        JOIN inventory i ON s.stk_id = i.iv_id
        JOIN SelectedProducts sp ON s.prd_id = sp.prd_id
        JOIN SelectedBranches sb ON s.branch_id = sb.branch_id
        WHERE s.stk_date BETWEEN (SELECT start_date FROM DateRange) AND (SELECT end_date FROM DateRange)
        ),
        InOutStock AS (
        SELECT prd_id, stk_date, branch_id,
        CASE WHEN iv_type = '입고' THEN stk_stock ELSE NULL END AS in_quantity,
        CASE WHEN iv_type = '출고' THEN stk_stock ELSE NULL END AS out_quantity
        FROM InventoryData
        )
        SELECT p.prd_id, p.prd_title, ios.stk_date, ios.branch_id,
        SUM(ios.in_quantity) OVER (PARTITION BY ios.prd_id, ios.branch_id ORDER BY ios.stk_date) AS cumulative_in,
        SUM(ios.out_quantity) OVER (PARTITION BY ios.prd_id, ios.branch_id ORDER BY ios.stk_date) AS cumulative_out,
        SUM(ios.in_quantity) OVER (PARTITION BY ios.prd_id, ios.branch_id ORDER BY ios.stk_date) -
        SUM(ios.out_quantity) OVER (PARTITION BY ios.prd_id, ios.branch_id ORDER BY ios.stk_date) AS stock_quantity
        FROM InOutStock ios
        JOIN product p ON ios.prd_id = p.prd_id
        ORDER BY p.prd_id, ios.branch_id, ios.stk_date
    </select>-->

    <!--  <select id="selectInventoryReport" parameterType="hashMap" resultType="hashMap">
          WITH DateRange AS (
          SELECT TO_DATE('2023-01-01', 'YYYY-MM-DD') AS start_date,
          TO_DATE('2023-12-31', 'YYYY-MM-DD') AS end_date
          FROM dual
          ),
          SelectedProducts AS (

          <choose>
              <when test="prdIdList != null and !prdIdList.isEmpty()">
                  SELECT prd_id FROM product WHERE prd_id IN
                  <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                      #{prdId}

                  </foreach>
              </when>
              <otherwise>
                  SELECT prd_id FROM product
              </otherwise>
          </choose>
          ),
          InventoryData AS (
          SELECT s.stk_id, s.stk_date, i.iv_type, s.stk_stock, s.prd_id
          FROM STOCK s
          join inventory i ON s.stk_id = i.iv_id
          JOIN SelectedProducts sp ON s.prd_id = sp.prd_id
          WHERE s.stk_date BETWEEN (SELECT start_date FROM DateRange) AND (SELECT end_date FROM DateRange)
          ),
          InOutStock AS (
          SELECT prd_id, stk_date,
          CASE WHEN iv_type = '입고' THEN stk_stock ELSE 0 END AS in_quantity,
          CASE WHEN iv_type = '출고' THEN stk_stock ELSE 0 END AS out_quantity
          FROM InventoryData
          )
          SELECT p.prd_id, p.prd_title, ios.stk_date,
          SUM(ios.in_quantity) OVER (PARTITION BY ios.prd_id ORDER BY ios.stk_date) AS cumulative_in,
          SUM(ios.out_quantity) OVER (PARTITION BY ios.prd_id ORDER BY ios.stk_date) AS cumulative_out,
          SUM(ios.in_quantity) OVER (PARTITION BY ios.prd_id ORDER BY ios.stk_date) -
          SUM(ios.out_quantity) OVER (PARTITION BY ios.prd_id ORDER BY ios.stk_date) AS stock_quantity
          FROM InOutStock ios
          JOIN product p ON ios.prd_id = p.prd_id
          ORDER BY p.prd_id, ios.stk_date
      </select>-->


    <!--  <select id="selectInventoryReport" parameterType="hashMap" resultType="hashMap">
          WITH DateRange AS (
          SELECT TO_DATE(#{startDate}, 'YYYY-MM-DD') AS start_date,
          TO_DATE(#{endDate}, 'YYYY-MM-DD') AS end_date
          FROM dual
          ),
          SelectedProducts AS (
          <choose>
              <when test="prdIdList != null and !prdIdList.isEmpty()">
                  SELECT prd_id FROM product WHERE prd_id IN
                  <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                      #{prdId}
                  </foreach>
              </when>
              <otherwise>
                  SELECT prd_id FROM product
              </otherwise>
          </choose>
          ),
          InventoryTransactions AS (
          SELECT i.iv_id, i.iv_type, i.iv_date, ip.prd_iv_quantity, ip.prd_id
          FROM INVENTORY i
          JOIN PRDINVENTORY ip ON i.iv_id = ip.iv_id
          JOIN SelectedProducts sp ON ip.prd_id = sp.prd_id
          WHERE i.iv_date BETWEEN (SELECT start_date FROM DateRange) AND (SELECT end_date FROM DateRange)
          ),
          InOutStock AS (
          SELECT prd_id, iv_date,
          CASE WHEN iv_type = '입고' THEN prd_iv_quantity ELSE 0 END AS in_quantity,
          CASE WHEN iv_type = '출고' THEN prd_iv_quantity ELSE 0 END AS out_quantity
          FROM InventoryTransactions
          )
          SELECT p.prd_id, p.prd_title, ios.iv_date,
          SUM(ios.in_quantity) OVER (PARTITION BY ios.prd_id ORDER BY ios.iv_date) AS cumulative_in,
          SUM(ios.out_quantity) OVER (PARTITION BY ios.prd_id ORDER BY ios.iv_date) AS cumulative_out,
          SUM(ios.in_quantity) OVER (PARTITION BY ios.prd_id ORDER BY ios.iv_date) -
          SUM(ios.out_quantity) OVER (PARTITION BY ios.prd_id ORDER BY ios.iv_date) AS stock_quantity
          FROM InOutStock ios
          JOIN product p ON ios.prd_id = p.prd_id
          ORDER BY p.prd_id, ios.iv_date
      </select>-->


    <select id="selectStockByBranch" parameterType="hashMap" resultType="hashMap">
        WITH RecentStockDate AS (
        SELECT MAX(stk_date) AS recent_date
        FROM stock
        WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
        ),
        UniquePrices AS (
        SELECT DISTINCT p.prd_id, p.price_in_stk
        FROM product p
        JOIN stock s ON p.prd_id = s.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        ),
        BranchStock AS (
        SELECT prd_id, branch_id, stk_stock,
        ROW_NUMBER() OVER (PARTITION BY prd_id, branch_id ORDER BY stk_date DESC) AS rn
        FROM stock
        WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
        ),
        SelectedProducts AS (
        <if test="prdIdList != null">
            <choose>
                <!-- 첫 번째 요소가 '0'이거나 리스트가 비어있으면 모든 상품을 선택 -->

                <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                    SELECT prd_id FROM product WHERE prd_isdel = 'N'
                </when>
                <!-- 그렇지 않은 경우, 지정된 상품 ID만을 포함 -->
                <otherwise>
                    SELECT prd_id FROM product WHERE prd_id IN
                    <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                        #{prdId}
                    </foreach>
                    AND prd_isdel = 'N'
                </otherwise>
            </choose>
        </if>
        ),
        SelectedBranches AS(
        <if test="branchIdList != null">
            <choose>
                <!-- 첫 번째 요소가 '0'이거나 리스트가 비어있으면 모든 지점을 선택 -->
                <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                    SELECT branch_id FROM branch
                </when>
                <!-- 그렇지 않은 경우, 지정된 지점 ID만을 포함 -->
                <otherwise>
                    SELECT branch_id FROM branch WHERE branch_id IN
                    <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                        #{branchId}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        ),
        SelectedBranchStock AS (
        SELECT prd_id, branch_id, stk_stock
        FROM BranchStock
        WHERE rn = 1
        AND prd_id IN (SELECT prd_id FROM SelectedProducts)
        AND branch_id IN (SELECT branch_id FROM SelectedBranches)
        ),
        BranchStockSum AS (
        SELECT branch_id,
        SUM(stk_stock) AS total_branch_stock
        FROM BranchStock
        JOIN SelectedProducts ON BranchStock.prd_id = SelectedProducts.prd_id
        WHERE rn = 1
        GROUP BY branch_id
        )
        SELECT p.*,
        s.*,
        SUM(sbs.stk_stock) OVER (PARTITION BY sbs.prd_id) AS TOTAL_STOCK_BY_PRD,
        (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST, -- 단가 총액
        p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE, -- 품목별 총 판매가
        (SELECT SUM(p.prd_price * s.stk_stock)
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        JOIN SelectedBranchStock sbs ON s.prd_id = sbs.prd_id AND s.branch_id = sbs.branch_id
        WHERE
        <if test="branchIdList != null">
            <choose>
                <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                    1=1
                </when>
                <otherwise>
                    s.branch_id IN
                    <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                        #{branchId}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        <if test="prdIdList != null">
            <choose>
                <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                    AND 1=1
                </when>
                <otherwise>
                    AND s.prd_id IN
                    <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                        #{prdId}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        ) AS TOTAL_PRICE_ALLPRD, -- 모든 품목에 대한 전체 판매가
        SUM(s.stk_stock) OVER () AS TOTAL_STOCK_BY_ALLPRD,
        COALESCE(BS1.total_branch_stock, 0) AS Branch1_Stock_Sum,
        COALESCE(BS2.total_branch_stock, 0) AS Branch2_Stock_Sum,
        COALESCE(BS3.total_branch_stock, 0) AS Branch3_Stock_Sum,
        COALESCE(BS4.total_branch_stock, 0) AS Branch4_Stock_Sum,
        COALESCE(BS5.total_branch_stock, 0) AS Branch5_Stock_Sum,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 1 AND rn = 1) AS Branch1_Stock,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 2 AND rn = 1) AS Branch2_Stock,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 3 AND rn = 1) AS Branch3_Stock,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 4 AND rn = 1) AS Branch4_Stock,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 5 AND rn = 1) AS Branch5_Stock,
        b.branch_name,
        #{stkDate} AS selected_stk_date
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN branch b ON s.branch_id = b.branch_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        JOIN SelectedBranchStock sbs ON s.prd_id = sbs.prd_id AND s.branch_id = sbs.branch_id


        /* LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 1 AND rn = 1 GROUP
        BY
        prd_id) B1 ON p.prd_id = B1.prd_id
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 2 AND rn = 1 GROUP BY
        prd_id) B2 ON p.prd_id = B2.prd_id
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 3 AND rn = 1 GROUP BY
        prd_id) B3 ON p.prd_id = B3.prd_id
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 4 AND rn = 1 GROUP BY
        prd_id) B4 ON p.prd_id = B4.prd_id
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 5 AND rn = 1 GROUP BY
        prd_id) B5 ON p.prd_id = B5.prd_id*/
        LEFT JOIN BranchStockSum BS1 ON b.branch_id = BS1.branch_id AND BS1.branch_id = 1
        LEFT JOIN BranchStockSum BS2 ON b.branch_id = BS2.branch_id AND BS2.branch_id = 2
        LEFT JOIN BranchStockSum BS3 ON b.branch_id = BS3.branch_id AND BS3.branch_id = 3
        LEFT JOIN BranchStockSum BS4 ON b.branch_id = BS4.branch_id AND BS4.branch_id = 4
        LEFT JOIN BranchStockSum BS5 ON b.branch_id = BS5.branch_id AND BS5.branch_id = 5

        WHERE

        <if test="branchIdList != null">
            <choose>
                <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                    1=1
                </when>
                <otherwise>
                    s.branch_id IN
                    <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                        #{branchId}
                    </foreach>
                </otherwise>
            </choose>
        </if>

        <if test="prdIdList != null">
            <choose>
                <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                    AND 1=1
                </when>
                <otherwise>
                    AND s.prd_id IN
                    <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                        #{prdId}
                    </foreach>
                </otherwise>

            </choose>
        </if>
    </select>

    <!-- <select id="selectStockByBranch" parameterType="hashMap" resultType="hashMap">
         WITH RecentStockDate AS (
         SELECT MAX(stk_date) AS recent_date
         FROM stock
         WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
         ),
         UniquePrices AS (
         SELECT DISTINCT p.prd_id, p.price_in_stk
         FROM product p
         JOIN stock s ON p.prd_id = s.prd_id
         JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
         ),
         BranchStock AS (
         SELECT prd_id, branch_id, stk_stock,
         ROW_NUMBER() OVER (PARTITION BY prd_id, branch_id ORDER BY stk_date DESC) AS rn
         FROM stock
         WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
         ),
         BranchStockSum AS (
         SELECT branch_id,
         SUM(stk_stock) AS total_branch_stock
         FROM BranchStock
         WHERE rn = 1
         GROUP BY branch_id
         )
         SELECT p.*,
         s.*,
         SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_STOCK_BY_PRD, &#45;&#45; 품목별 총 재고량
         (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST, &#45;&#45; 단가 총액
         p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE, &#45;&#45; 품목별 총 판매가
         (SELECT SUM(p.prd_price * s.stk_stock)
         FROM stock s
         JOIN product p ON s.prd_id = p.prd_id
         JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
         WHERE
         <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
             1=1
         </if>
         <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
             s.branch_id IN
             <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                 #{branchId}
             </foreach>
         </if>
         <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
             AND 1=1
         </if>
         <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
             AND s.prd_id IN
             <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                 #{prdId}
             </foreach>
         </if>
         ) AS TOTAL_PRICE_ALLPRD, &#45;&#45; 모든 품목에 대한 전체 판매가
         SUM(s.stk_stock) OVER () AS TOTAL_STOCK_BY_ALLPRD,
         COALESCE(BS1.total_branch_stock, 0) AS Branch1_Stock_Sum,
         COALESCE(BS2.total_branch_stock, 0) AS Branch2_Stock_Sum,
         COALESCE(BS3.total_branch_stock, 0) AS Branch3_Stock_Sum,
         COALESCE(BS4.total_branch_stock, 0) AS Branch4_Stock_Sum,
         COALESCE(BS5.total_branch_stock, 0) AS Branch5_Stock_Sum,
         (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 1 AND rn = 1) AS Branch1_Stock,
         (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 2 AND rn = 1) AS Branch2_Stock,
         (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 3 AND rn = 1) AS Branch3_Stock,
         (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 4 AND rn = 1) AS Branch4_Stock,
         (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 5 AND rn = 1) AS Branch5_Stock,
         b.branch_name,
         #{stkDate} AS selected_stk_date
         FROM stock s
         JOIN product p ON s.prd_id = p.prd_id
         JOIN branch b ON s.branch_id = b.branch_id
         JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
         /* LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 1 AND rn = 1 GROUP
         BY
         prd_id) B1 ON p.prd_id = B1.prd_id
         LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 2 AND rn = 1 GROUP BY
         prd_id) B2 ON p.prd_id = B2.prd_id
         LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 3 AND rn = 1 GROUP BY
         prd_id) B3 ON p.prd_id = B3.prd_id
         LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 4 AND rn = 1 GROUP BY
         prd_id) B4 ON p.prd_id = B4.prd_id
         LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM BranchStock WHERE branch_id = 5 AND rn = 1 GROUP BY
         prd_id) B5 ON p.prd_id = B5.prd_id*/
         LEFT JOIN BranchStockSum BS1 ON b.branch_id = BS1.branch_id AND BS1.branch_id = 1
         LEFT JOIN BranchStockSum BS2 ON b.branch_id = BS2.branch_id AND BS2.branch_id = 2
         LEFT JOIN BranchStockSum BS3 ON b.branch_id = BS3.branch_id AND BS3.branch_id = 3
         LEFT JOIN BranchStockSum BS4 ON b.branch_id = BS4.branch_id AND BS4.branch_id = 4
         LEFT JOIN BranchStockSum BS5 ON b.branch_id = BS5.branch_id AND BS5.branch_id = 5
         WHERE
         <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
             1=1 &lt;!&ndash; 첫 번째 조건: 모든 지점을 포함 &ndash;&gt;
         </if>
         <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
             s.branch_id IN &lt;!&ndash; 추가 조건: 특정 지점을 포함 &ndash;&gt;
             <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                 #{branchId}
             </foreach>
         </if>
         <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
             AND 1=1 &lt;!&ndash; 추가 조건: 모든 품목을 포함 &ndash;&gt;
         </if>
         <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
             AND s.prd_id IN &lt;!&ndash; 추가 조건: 특정 품목을 포함 &ndash;&gt;
             <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                 #{prdId}
             </foreach>
         </if>
     </select>
 -->
    <!--    <select id="selectStockByBranch" parameterType="hashMap" resultType="hashMap">
            WITH RecentStockDate AS (
            SELECT MAX(stk_date) AS recent_date
            FROM stock
            WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD')
            ),
            UniquePrices AS (
            SELECT DISTINCT p.prd_id, p.price_in_stk
            FROM product p
            JOIN stock s ON p.prd_id = s.prd_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            ),
            Branch1Stock AS (
            SELECT prd_id, stk_stock
            FROM stock
            WHERE branch_id = 1
            ),
            Branch2Stock AS (
            SELECT prd_id, stk_stock
            FROM stock
            WHERE branch_id = 2
            ),
            Branch3Stock AS (
            SELECT prd_id, stk_stock
            FROM stock
            WHERE branch_id = 3
            ),
            Branch4Stock AS (
            SELECT prd_id, stk_stock
            FROM stock
            WHERE branch_id = 4
            ),
            Branch5Stock AS (
            SELECT prd_id, stk_stock
            FROM stock
            WHERE branch_id = 5
            )
            SELECT p.*,
            s.*,
            SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_STOCK_BY_PRD, &#45;&#45; 품목별 총 재고량
            (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST, &#45;&#45; 단가 총액
            p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE, &#45;&#45; 품목별 총 판매가
            (SELECT SUM(p.prd_price * s.stk_stock)
            FROM stock s
            JOIN product p ON s.prd_id = p.prd_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            WHERE
            <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
                1=1
            </if>
            <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
                s.branch_id IN
                <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                    #{branchId}
                </foreach>
            </if>
            <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
                AND 1=1
            </if>
            <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
                AND s.prd_id IN
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </if>
            ) AS TOTAL_PRICE_ALLPRD, &#45;&#45; 모든 품목에 대한 전체 판매가
            B1.stk_stock AS Branch1_Stock,
            B2.stk_stock AS Branch2_Stock,
            B3.stk_stock AS Branch3_Stock,
            B4.stk_stock AS Branch4_Stock,
            B5.stk_stock AS Branch5_Stock,
            b.branch_name
            FROM stock s
            JOIN product p ON s.prd_id = p.prd_id
            JOIN branch b ON s.branch_id = b.branch_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            LEFT JOIN Branch1Stock B1 ON p.prd_id = B1.prd_id
            LEFT JOIN Branch2Stock B2 ON p.prd_id = B2.prd_id
            LEFT JOIN Branch3Stock B3 ON p.prd_id = B3.prd_id
            LEFT JOIN Branch4Stock B4 ON p.prd_id = B4.prd_id
            LEFT JOIN Branch5Stock B5 ON p.prd_id = B5.prd_id
            WHERE
            <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
                1=1 &lt;!&ndash; 첫 번째 조건: 모든 지점을 포함 &ndash;&gt;
            </if>
            <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
                s.branch_id IN &lt;!&ndash; 추가 조건: 특정 지점을 포함 &ndash;&gt;
                <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                    #{branchId}
                </foreach>
            </if>
            <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
                AND 1=1 &lt;!&ndash; 추가 조건: 모든 품목을 포함 &ndash;&gt;
            </if>
            <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
                AND s.prd_id IN &lt;!&ndash; 추가 조건: 특정 품목을 포함 &ndash;&gt;
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </if>
        </select>-->

    <!--    <select id="selectStockByBranch" parameterType="hashMap" resultType="hashMap">
        WITH RecentStockDate AS (
        SELECT MAX(stk_date) AS recent_date
        FROM stock
        WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD')
        ),
        UniquePrices AS (
        SELECT DISTINCT p.prd_id, p.price_in_stk
        FROM product p
        JOIN stock s ON p.prd_id = s.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        )
        SELECT p.*,
        s.*,
        SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_STOCK_BY_PRD, &#45;&#45; 품목별 총 재고량
        (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST, &#45;&#45; 단가 총액
        p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE, &#45;&#45; 품목별 총 판매가
        (SELECT SUM(p.prd_price * s.stk_stock)
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        WHERE
        <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
            1=1
        </if>
        <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
            s.branch_id IN
            <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                #{branchId}
            </foreach>
        </if>
        <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
            AND 1=1
        </if>
        <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
            AND s.prd_id IN
            <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                #{prdId}
            </foreach>
        </if>
        ) AS TOTAL_PRICE_ALLPRD, &#45;&#45; 모든 품목에 대한 전체 판매가
        COALESCE(B1.total_stock, 0) AS Branch1_Stock,
        COALESCE(B2.total_stock, 0) AS Branch2_Stock,
        COALESCE(B3.total_stock, 0) AS Branch3_Stock,
        COALESCE(B4.total_stock, 0) AS Branch4_Stock,
        COALESCE(B5.total_stock, 0) AS Branch5_Stock,
        b.branch_name
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN branch b ON s.branch_id = b.branch_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM stock WHERE branch_id = 1 GROUP BY prd_id) B1 ON p.prd_id = B1.prd_id
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM stock WHERE branch_id = 2 GROUP BY prd_id) B2 ON p.prd_id = B2.prd_id
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM stock WHERE branch_id = 3 GROUP BY prd_id) B3 ON p.prd_id = B3.prd_id
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM stock WHERE branch_id = 4 GROUP BY prd_id) B4 ON p.prd_id = B4.prd_id
        LEFT JOIN (SELECT prd_id, SUM(stk_stock) AS total_stock FROM stock WHERE branch_id = 5 GROUP BY prd_id) B5 ON p.prd_id = B5.prd_id
            WHERE
            <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
                1=1 &lt;!&ndash; 첫 번째 조건: 모든 지점을 포함 &ndash;&gt;
            </if>
            <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
                s.branch_id IN &lt;!&ndash; 추가 조건: 특정 지점을 포함 &ndash;&gt;
                <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                    #{branchId}
                </foreach>
            </if>
            <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
                AND 1=1 &lt;!&ndash; 추가 조건: 모든 품목을 포함 &ndash;&gt;
            </if>
            <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
                AND s.prd_id IN &lt;!&ndash; 추가 조건: 특정 품목을 포함 &ndash;&gt;
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </if>
        </select>-->


    <!--<select id="selectStockByBranch" parameterType="hashMap" resultType="hashMap">
        WITH RecentStockDate AS (
        SELECT MAX(stk_date) AS recent_date
        FROM stock
        WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD')
        ),
        UniquePrices AS (
        SELECT DISTINCT p.prd_id AS up_prd_id, p.price_in_stk AS up_price_in_stk
        FROM product p
        JOIN stock s ON p.prd_id = s.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        ),
        ExtendedStock AS (
        SELECT s.stk_id AS es_stk_id, s.stk_stock AS es_stk_stock, s.stk_date AS es_stk_date, s.branch_id AS es_branch_id,
        p.prd_id AS es_prd_id, p.PRD_TITLE AS es_prd_title, p.prd_price AS es_prd_price, p.prd_author AS es_prd_author,
        p.publish_date AS es_publish_date, p.prd_genre AS es_prd_genre, p.price_in_stk AS es_price_in_stk,
        p.price_out_stk AS es_price_out_stk, p.pub_id AS es_pub_id,
        b.branch_id AS es_brc_id, b.branch_name AS es_brc_name, b.branch_type AS es_brc_type
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN branch b ON s.branch_id = b.branch_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        )
        SELECT es_prd_id, es_prd_price, es_prd_title,
        <foreach item="branchId" index="index" collection="AllbranchIdList" open="" separator="" close="">
            MAX(CASE WHEN es_brc_id = #{branchId} THEN es_stk_stock ELSE 0 END) AS "branch_${branchName}_stock"
            <if test="index + 1 != AllbranchIdList.size()">,</if>
        </foreach>,
        SUM(es_stk_stock) OVER (PARTITION BY es_prd_id) AS total_stock,
        es_prd_author, es_publish_date, es_prd_genre, es_price_in_stk, es_price_out_stk, es_pub_id, es_stk_date, es_brc_name, es_brc_type
        FROM ExtendedStock
        GROUP BY es_prd_id, es_prd_title, es_prd_price, es_prd_author, es_publish_date, es_prd_genre, es_price_in_stk, es_price_out_stk, es_pub_id, es_stk_date, es_brc_name, es_brc_type
    </select>-->

    <!--    <select id="selectDaybyStock" parameterType="hashMap" resultType="hashMap">
            WITH RecentStockDate AS (
            SELECT MAX(stk_date) AS recent_date
            FROM stock
            WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD')
            ),
            UniquePrices AS (
            SELECT DISTINCT p.prd_id, p.price_in_stk
            FROM product p
            JOIN stock s ON p.prd_id = s.prd_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            )
            SELECT p.*,
            s.*,
            SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_STOCK_BY_PRD,
            (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST,
            p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE,
            (SELECT SUM(p.prd_price * s.stk_stock)
            FROM stock s
            JOIN product p ON s.prd_id = p.prd_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            WHERE
            <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
                1=1 &lt;!&ndash; 첫 번째 조건: 모든 지점을 포함 &ndash;&gt;
            </if>
            <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
                s.branch_id IN &lt;!&ndash; 추가 조건: 특정 지점을 포함 &ndash;&gt;
                <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                    #{branchId}
                </foreach>
            </if>


            <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
                AND 1=1 &lt;!&ndash; 추가 조건: 모든 품목을 포함 &ndash;&gt;
            </if>
            <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
                AND s.prd_id IN &lt;!&ndash; 추가 조건: 특정 품목을 포함 &ndash;&gt;
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </if>
            ) AS TOTAL_PRICE_ALLPRD,
            SUM(s.stk_stock) OVER () AS TOTAL_STOCK_BY_ALLPRD,
            b.branch_name
            FROM stock s
            JOIN product p ON s.prd_id = p.prd_id
            JOIN branch b ON s.branch_id = b.branch_id
            JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
            WHERE
            <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
                1=1 &lt;!&ndash; 첫 번째 조건: 모든 지점을 포함 &ndash;&gt;
            </if>
            <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
                s.branch_id IN &lt;!&ndash; 추가 조건: 특정 지점을 포함 &ndash;&gt;
                <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                    #{branchId}
                </foreach>
            </if>


            <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
                AND 1=1 &lt;!&ndash; 추가 조건: 모든 품목을 포함 &ndash;&gt;
            </if>
            <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
                AND s.prd_id IN &lt;!&ndash; 추가 조건: 특정 품목을 포함 &ndash;&gt;
                <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                    #{prdId}
                </foreach>
            </if>
        </select>-->


    <select id="selectDaybyStock" parameterType="hashMap" resultType="hashMap">
        WITH RecentStockDate AS (
        SELECT MAX(stk_date) AS recent_date
        FROM stock
        WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
        ),
        UniquePrices AS (
        SELECT DISTINCT p.prd_id, p.price_in_stk
        FROM product p
        JOIN stock s ON p.prd_id = s.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        WHERE p.prd_isdel = 'N'

        )
        SELECT p.*,
        s.*,
        SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_STOCK_BY_PRD, -- 품목별 총 재고량
        (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST, -- 단가 총액
        p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE, -- 품목별 총 판매가
        (SELECT SUM(p.prd_price * s.stk_stock)
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        WHERE
        <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
            1=1 <!-- 첫 번째 조건: 모든 지점을 포함 -->
        </if>
        <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
            s.branch_id IN <!-- 추가 조건: 특정 지점을 포함 -->
            <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                #{branchId}
            </foreach>
        </if>


        <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
            AND 1=1 <!-- 추가 조건: 모든 품목을 포함 -->
        </if>
        <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
            AND s.prd_id IN <!-- 추가 조건: 특정 품목을 포함 -->
            <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                #{prdId}
            </foreach>
        </if>
        AND p.prd_isdel = 'N'
        ) AS TOTAL_PRICE_ALLPRD, -- 모든 품목에 대한 전체 판매가
        SUM(s.stk_stock) OVER () AS TOTAL_STOCK_BY_ALLPRD,
        b.branch_name,
        #{stkDate} AS selected_stk_date
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN branch b ON s.branch_id = b.branch_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        WHERE
        <if test="branchIdList == null or branchIdList.contains('0') or branchIdList.contains('')">
            1=1 <!-- 첫 번째 조건: 모든 지점을 포함 -->
        </if>
        <if test="branchIdList != null and !branchIdList.contains('0') and !branchIdList.contains('')">
            s.branch_id IN <!-- 추가 조건: 특정 지점을 포함 -->
            <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                #{branchId}
            </foreach>
        </if>


        <if test="prdIdList == null or prdIdList.contains('0') or prdIdList.contains('')">
            AND 1=1 <!-- 추가 조건: 모든 품목을 포함 -->
        </if>
        <if test="prdIdList != null and !prdIdList.contains('0') and !prdIdList.contains('')">
            AND s.prd_id IN <!-- 추가 조건: 특정 품목을 포함 -->
            <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                #{prdId}
            </foreach>
=======
    <select id="selectInventoryReport" parameterType="hashMap" resultType="hashMap">
        WITH DateRange AS (
        SELECT TO_DATE(#{start-date-hidden}, 'YYYY-MM-DD') AS start_date,
        TO_DATE(#{end-date-hidden}, 'YYYY-MM-DD') AS end_date
        FROM dual
        ),
        SelectedBranches AS (
        /* SELECT branch_id
        FROM branch
        WHERE branch_id IN (1)*/
        <!--     <foreach item="item" collection="selectedBranchIds" open="(" separator="," close=")">
                 #{item}
             </foreach>-->

        <if test="branchIdList != null">
            <choose>
                <!-- 첫 번째 요소가 '0'이거나 리스트가 비어있으면 모든 지점을 선택 -->
                <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                    SELECT branch_id FROM branch
                </when>
                <!-- 그렇지 않은 경우, 지정된 지점 ID만을 포함 -->
                <otherwise>
                    SELECT branch_id FROM branch WHERE branch_id IN
                    <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                        #{branchId}
                    </foreach>
                </otherwise>
            </choose>
        </if>

        ),
        SelectedProducts AS (
        /* SELECT prd_id
        FROM product
        WHERE prd_id IN (1)*/
        <!--    <foreach item="item" collection="selectedProductIds" open="(" separator="," close=")">
                #{item}
            </foreach>-->


        <if test="prdIdList != null">
            <choose>
                <!-- 첫 번째 요소가 '0'이거나 리스트가 비어있으면 모든 상품을 선택 -->

                <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                    SELECT prd_id FROM product WHERE prd_isdel = 'N'
                </when>
                <!-- 그렇지 않은 경우, 지정된 상품 ID만을 포함 -->
                <otherwise>
                    SELECT prd_id FROM product WHERE prd_id IN
                    <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                        #{prdId}
                    </foreach>
                    AND prd_isdel = 'N'
                </otherwise>
            </choose>
        </if>
        ),
        PreviousStockData AS (
        SELECT s.branch_id,
        s.prd_id,
        s.stk_stock AS previous_stock
        FROM stock s
        JOIN (
        SELECT branch_id,
        prd_id,
        MAX(stk_date) AS max_date
        FROM stock
        WHERE stk_date <![CDATA[ <]]> (SELECT start_date FROM DateRange)
        GROUP BY branch_id, prd_id
        ) max_stock_dates ON s.branch_id = max_stock_dates.branch_id
        AND s.prd_id = max_stock_dates.prd_id
        AND s.stk_date = max_stock_dates.max_date
        WHERE s.branch_id IN (SELECT branch_id FROM SelectedBranches)
        AND s.prd_id IN (SELECT prd_id FROM SelectedProducts)
        ),
        InventoryStockData AS (
        SELECT s.stk_date, s.stk_stock, s.branch_id, s.prd_id, s.SEND_IV_ID, i.send_brc_id, i.recieve_brc_id,
        i.iv_type, p.prd_iv_quantity, ps.previous_stock
        FROM stock s
        JOIN inventory i ON s.SEND_IV_ID = i.iv_id
        JOIN prdInventory p ON i.iv_id = p.iv_id AND s.prd_id = p.prd_id
        LEFT JOIN PreviousStockData ps ON s.branch_id = ps.branch_id AND s.prd_id = ps.prd_id
        WHERE s.stk_date BETWEEN (SELECT start_date FROM DateRange) AND (SELECT end_date FROM DateRange)
        AND s.branch_id IN (SELECT branch_id FROM SelectedBranches)
        AND s.prd_id IN (SELECT prd_id FROM SelectedProducts)
        ),
        MonthlyTotals AS (
        SELECT
        branch_id,
        prd_id,
        TO_CHAR(stk_date, 'YYYY-MM') AS total_month_name,
        SUM(CASE WHEN iv_type = '입고' THEN prd_iv_quantity ELSE 0 END) AS total_month_in,
        SUM(CASE WHEN iv_type = '출고' THEN prd_iv_quantity ELSE 0 END) AS total_month_out,
        MAX(stk_date) AS max_stk_date
        FROM InventoryStockData
        GROUP BY branch_id, prd_id, TO_CHAR(stk_date, 'YYYY-MM')
        ),
        ExtendedMonthlyTotals AS (
        SELECT
        mt.*,
        s.stk_stock AS total_month_stock
        FROM MonthlyTotals mt
        JOIN stock s ON mt.branch_id = s.branch_id
        AND mt.prd_id = s.prd_id
        AND mt.max_stk_date = s.stk_date
        ),
        FinalTotals AS (
        SELECT branch_id, prd_id,
        SUM(total_month_in) AS final_month_in,
        SUM(total_month_out) AS final_month_out
        FROM MonthlyTotals
        GROUP BY branch_id, prd_id
        )
        SELECT p.prd_id, p.prd_title, b.branch_name, isd.stk_date, isd.stk_stock,b2.branch_name as recieve_branch_name,
        isd.send_brc_id,isd.recieve_brc_id,
        isd.iv_type,
        CASE WHEN isd.iv_type = '입고' THEN isd.prd_iv_quantity ELSE 0 END AS in_stock,
        CASE WHEN isd.iv_type = '출고' THEN isd.prd_iv_quantity ELSE 0 END AS out_stock,
        TO_CHAR(isd.stk_date, 'YYYY-MM') AS total_month_name,
        isd.previous_stock,
        mt.total_month_in, mt.total_month_out, mt.total_month_stock,
        ft.final_month_in, ft.final_month_out,
        LAST_VALUE(isd.stk_stock) OVER (PARTITION BY isd.branch_id, isd.prd_id ORDER BY isd.stk_date ROWS BETWEEN
        UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS final_quantity
        FROM InventoryStockData isd
        JOIN ExtendedMonthlyTotals mt ON TO_CHAR(isd.stk_date, 'YYYY-MM') = mt.total_month_name
        AND isd.branch_id = mt.branch_id AND isd.prd_id = mt.prd_id
        JOIN FinalTotals ft ON isd.branch_id = ft.branch_id AND isd.prd_id = ft.prd_id
        JOIN branch b ON isd.branch_id = b.branch_id
        join inventory i on isd.send_iv_id = i.iv_id
        join branch b2 on i.RECIEVE_BRC_ID = b2.branch_id
        JOIN product p ON isd.prd_id = p.prd_id
        ORDER BY isd.stk_date, isd.branch_id, isd.prd_id
    </select>


    <select id="selectStockByBranch" parameterType="hashMap" resultType="hashMap">
        WITH BranchProductRecentStockDate AS (
        SELECT s.branch_id, s.prd_id, MAX(s.stk_date) AS recent_date
        FROM stock s
        WHERE stk_date <![CDATA[ <=]]>  TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
        GROUP BY s.branch_id, s.prd_id
        ),
        UniquePrices AS (
        SELECT DISTINCT p.prd_id, p.price_in_stk
        FROM product p
        JOIN stock s ON p.prd_id = s.prd_id
        JOIN BranchProductRecentStockDate bprsd ON s.branch_id = bprsd.branch_id AND s.prd_id = bprsd.prd_id AND
        s.stk_date = bprsd.recent_date
        ),
        BranchStock AS (
        SELECT prd_id, branch_id, stk_stock,
        ROW_NUMBER() OVER (PARTITION BY prd_id, branch_id ORDER BY stk_date DESC) AS rn
        FROM stock
        WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
        ),
        SelectedProducts AS (
        <if test="prdIdList != null">
            <choose>
                <!-- 첫 번째 요소가 '0'이거나 리스트가 비어있으면 모든 상품을 선택 -->

                <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                    SELECT prd_id FROM product WHERE prd_isdel = 'N'
                </when>
                <!-- 그렇지 않은 경우, 지정된 상품 ID만을 포함 -->
                <otherwise>
                    SELECT prd_id FROM product WHERE prd_id IN
                    <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                        #{prdId}
                    </foreach>
                    AND prd_isdel = 'N'
                </otherwise>
            </choose>
        </if>
        ),
        SelectedBranches AS(
        <if test="branchIdList != null">
            <choose>
                <!-- 첫 번째 요소가 '0'이거나 리스트가 비어있으면 모든 지점을 선택 -->
                <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                    SELECT branch_id FROM branch
                </when>
                <!-- 그렇지 않은 경우, 지정된 지점 ID만을 포함 -->
                <otherwise>
                    SELECT branch_id FROM branch WHERE branch_id IN
                    <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                        #{branchId}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        ),
        SelectedBranchProductStock AS (
        SELECT s.prd_id, s.branch_id, s.stk_stock
        FROM stock s
        JOIN BranchProductRecentStockDate bprsd ON s.branch_id = bprsd.branch_id AND s.prd_id = bprsd.prd_id AND
        s.stk_date = bprsd.recent_date
        WHERE s.prd_id IN (SELECT prd_id FROM SelectedProducts)
        AND s.branch_id IN (SELECT branch_id FROM SelectedBranches)
        ),
        SelectedBranchStock AS (
        SELECT prd_id, branch_id, stk_stock
        FROM BranchStock
        WHERE rn = 1
        AND prd_id IN (SELECT prd_id FROM SelectedProducts)
        AND branch_id IN (SELECT branch_id FROM SelectedBranches)
        ),
        BranchStockSum AS (
        SELECT branch_id,
        SUM(stk_stock) AS total_branch_stock
        FROM BranchStock
        JOIN SelectedProducts ON BranchStock.prd_id = SelectedProducts.prd_id
        WHERE rn = 1
        GROUP BY branch_id
        )
        SELECT p.*,
        s.*,
        SUM(sbs.stk_stock) OVER (PARTITION BY sbs.prd_id) AS TOTAL_STOCK_BY_PRD,
        (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST, -- 단가 총액
        p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE, -- 품목별 총 판매가
        (SELECT SUM(p.prd_price * s.stk_stock)
        FROM SelectedBranchProductStock sbps
        JOIN product p ON sbps.prd_id = p.prd_id
        JOIN branch b ON sbps.branch_id = b.branch_id
        JOIN UniquePrices up ON sbps.prd_id = up.prd_id
        LEFT JOIN BranchStockSum BS1 ON b.branch_id = BS1.branch_id AND BS1.branch_id = 1
        LEFT JOIN BranchStockSum BS2 ON b.branch_id = BS2.branch_id AND BS2.branch_id = 2
        LEFT JOIN BranchStockSum BS3 ON b.branch_id = BS3.branch_id AND BS3.branch_id = 3
        LEFT JOIN BranchStockSum BS4 ON b.branch_id = BS4.branch_id AND BS4.branch_id = 4
        LEFT JOIN BranchStockSum BS5 ON b.branch_id = BS5.branch_id AND BS5.branch_id = 5
        WHERE
        <if test="branchIdList != null">
            <choose>
                <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                    1=1
                </when>
                <otherwise>
                    s.branch_id IN
                    <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                        #{branchId}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        <if test="prdIdList != null">
            <choose>
                <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                    AND 1=1
                </when>
                <otherwise>
                    AND s.prd_id IN
                    <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                        #{prdId}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        ) AS TOTAL_PRICE_ALLPRD, -- 모든 품목에 대한 전체 판매가
        SUM(s.stk_stock) OVER () AS TOTAL_STOCK_BY_ALLPRD,
        COALESCE(BS1.total_branch_stock, 0) AS Branch1_Stock_Sum,
        COALESCE(BS2.total_branch_stock, 0) AS Branch2_Stock_Sum,
        COALESCE(BS3.total_branch_stock, 0) AS Branch3_Stock_Sum,
        COALESCE(BS4.total_branch_stock, 0) AS Branch4_Stock_Sum,
        COALESCE(BS5.total_branch_stock, 0) AS Branch5_Stock_Sum,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 1 AND rn = 1) AS Branch1_Stock,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 2 AND rn = 1) AS Branch2_Stock,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 3 AND rn = 1) AS Branch3_Stock,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 4 AND rn = 1) AS Branch4_Stock,
        (SELECT stk_stock FROM BranchStock WHERE prd_id = p.prd_id AND branch_id = 5 AND rn = 1) AS Branch5_Stock,
        b.branch_name,
        #{stkDate} AS selected_stk_date
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN branch b ON s.branch_id = b.branch_id
        JOIN BranchProductRecentStockDate rsd ON s.stk_date = rsd.recent_date
        JOIN SelectedBranchStock sbs ON s.prd_id = sbs.prd_id AND s.branch_id = sbs.branch_id


        LEFT JOIN BranchStockSum BS1 ON b.branch_id = BS1.branch_id AND BS1.branch_id = 1
        LEFT JOIN BranchStockSum BS2 ON b.branch_id = BS2.branch_id AND BS2.branch_id = 2
        LEFT JOIN BranchStockSum BS3 ON b.branch_id = BS3.branch_id AND BS3.branch_id = 3
        LEFT JOIN BranchStockSum BS4 ON b.branch_id = BS4.branch_id AND BS4.branch_id = 4
        LEFT JOIN BranchStockSum BS5 ON b.branch_id = BS5.branch_id AND BS5.branch_id = 5

        WHERE

        <if test="branchIdList != null">
            <choose>
                <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                    1=1
                </when>
                <otherwise>
                    s.branch_id IN
                    <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                        #{branchId}
                    </foreach>
                </otherwise>
            </choose>
        </if>

        <if test="prdIdList != null">
            <choose>
                <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                    AND 1=1
                </when>
                <otherwise>
                    AND s.prd_id IN
                    <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                        #{prdId}
                    </foreach>
                </otherwise>

            </choose>
        </if>
    </select>


    <select id="selectDaybyStock" parameterType="hashMap" resultType="hashMap">
        WITH RecentStockDate AS (
        SELECT s.branch_id, s.prd_id, MAX(s.stk_date) AS recent_date
        FROM stock s
        WHERE stk_date <![CDATA[ <=]]> TO_DATE(#{stkDate}, 'YYYY-MM-DD HH24:MI:SS')
        GROUP BY s.branch_id, s.prd_id
        ),
        UniquePrices AS (
        SELECT DISTINCT p.prd_id, p.price_in_stk
        FROM product p
        JOIN stock s ON p.prd_id = s.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date AND s.branch_id = rsd.branch_id AND s.prd_id =
        rsd.prd_id
        WHERE p.prd_isdel = 'N'
        )
        SELECT p.*,
        s.*,
        SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_STOCK_BY_PRD,
        (SELECT SUM(price_in_stk) FROM UniquePrices) AS TOTAL_PURCHASE_COST,
        p.prd_price * SUM(s.stk_stock) OVER (PARTITION BY p.prd_id) AS TOTAL_PRICE,
        (SELECT SUM(p.prd_price * s.stk_stock)
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date
        WHERE p.prd_isdel = 'N' -- 삭제되지 않은 제품만 포함
        ) AS TOTAL_PRICE_ALLPRD,
        SUM(s.stk_stock) OVER () AS TOTAL_STOCK_BY_ALLPRD,
        b.branch_name,
        #{stkDate} AS selected_stk_date
        FROM stock s
        JOIN product p ON s.prd_id = p.prd_id
        JOIN branch b ON s.branch_id = b.branch_id
        JOIN RecentStockDate rsd ON s.stk_date = rsd.recent_date AND s.branch_id = rsd.branch_id AND s.prd_id =
        rsd.prd_id
        WHERE
        <if test="branchIdList != null">
            <choose>
                <when test="branchIdList == null or branchIdList[0] == '0' or branchIdList.isEmpty() or branchIdList[0] == 0">
                    1=1
                </when>
                <otherwise>
                    s.branch_id IN
                    <foreach item="branchId" collection="branchIdList" open="(" separator="," close=")">
                        #{branchId}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        <if test="prdIdList != null">
            <choose>
                <when test="prdIdList == null or prdIdList[0] == '0' or prdIdList.isEmpty() or prdIdList[0] == 0">
                    AND 1=1
                </when>
                <otherwise>
                    AND s.prd_id IN
                    <foreach item="prdId" collection="prdIdList" open="(" separator="," close=")">
                        #{prdId}
                    </foreach>
                </otherwise>
            </choose>
>>>>>>> branch 'dev' of https://github.com/devkingkong96/final_project_rocketcoding.git
        </if>
        AND p.prd_isdel = 'N'
        AND b.branch_isdel = 'N'
    </select>

</mapper>
